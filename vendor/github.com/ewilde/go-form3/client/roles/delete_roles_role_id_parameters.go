// Code generated by go-swagger; DO NOT EDIT.

package roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteRolesRoleIDParams creates a new DeleteRolesRoleIDParams object
// with the default values initialized.
func NewDeleteRolesRoleIDParams() *DeleteRolesRoleIDParams {
	var ()
	return &DeleteRolesRoleIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteRolesRoleIDParamsWithTimeout creates a new DeleteRolesRoleIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteRolesRoleIDParamsWithTimeout(timeout time.Duration) *DeleteRolesRoleIDParams {
	var ()
	return &DeleteRolesRoleIDParams{

		timeout: timeout,
	}
}

// NewDeleteRolesRoleIDParamsWithContext creates a new DeleteRolesRoleIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteRolesRoleIDParamsWithContext(ctx context.Context) *DeleteRolesRoleIDParams {
	var ()
	return &DeleteRolesRoleIDParams{

		Context: ctx,
	}
}

// NewDeleteRolesRoleIDParamsWithHTTPClient creates a new DeleteRolesRoleIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteRolesRoleIDParamsWithHTTPClient(client *http.Client) *DeleteRolesRoleIDParams {
	var ()
	return &DeleteRolesRoleIDParams{
		HTTPClient: client,
	}
}

/*DeleteRolesRoleIDParams contains all the parameters to send to the API endpoint
for the delete roles role ID operation typically these are written to a http.Request
*/
type DeleteRolesRoleIDParams struct {

	/*RoleID
	  Role Id

	*/
	RoleID strfmt.UUID
	/*Version
	  Version

	*/
	Version int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete roles role ID params
func (o *DeleteRolesRoleIDParams) WithTimeout(timeout time.Duration) *DeleteRolesRoleIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete roles role ID params
func (o *DeleteRolesRoleIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete roles role ID params
func (o *DeleteRolesRoleIDParams) WithContext(ctx context.Context) *DeleteRolesRoleIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete roles role ID params
func (o *DeleteRolesRoleIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete roles role ID params
func (o *DeleteRolesRoleIDParams) WithHTTPClient(client *http.Client) *DeleteRolesRoleIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete roles role ID params
func (o *DeleteRolesRoleIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRoleID adds the roleID to the delete roles role ID params
func (o *DeleteRolesRoleIDParams) WithRoleID(roleID strfmt.UUID) *DeleteRolesRoleIDParams {
	o.SetRoleID(roleID)
	return o
}

// SetRoleID adds the roleId to the delete roles role ID params
func (o *DeleteRolesRoleIDParams) SetRoleID(roleID strfmt.UUID) {
	o.RoleID = roleID
}

// WithVersion adds the version to the delete roles role ID params
func (o *DeleteRolesRoleIDParams) WithVersion(version int64) *DeleteRolesRoleIDParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the delete roles role ID params
func (o *DeleteRolesRoleIDParams) SetVersion(version int64) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteRolesRoleIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param role_id
	if err := r.SetPathParam("role_id", o.RoleID.String()); err != nil {
		return err
	}

	// query param version
	qrVersion := o.Version
	qVersion := swag.FormatInt64(qrVersion)
	if qVersion != "" {
		if err := r.SetQueryParam("version", qVersion); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
