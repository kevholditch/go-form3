// Code generated by go-swagger; DO NOT EDIT.

package subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/ewilde/go-form3/models"
)

// NewPatchSubscriptionsIDParams creates a new PatchSubscriptionsIDParams object
// with the default values initialized.
func NewPatchSubscriptionsIDParams() *PatchSubscriptionsIDParams {
	var ()
	return &PatchSubscriptionsIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPatchSubscriptionsIDParamsWithTimeout creates a new PatchSubscriptionsIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPatchSubscriptionsIDParamsWithTimeout(timeout time.Duration) *PatchSubscriptionsIDParams {
	var ()
	return &PatchSubscriptionsIDParams{

		timeout: timeout,
	}
}

// NewPatchSubscriptionsIDParamsWithContext creates a new PatchSubscriptionsIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewPatchSubscriptionsIDParamsWithContext(ctx context.Context) *PatchSubscriptionsIDParams {
	var ()
	return &PatchSubscriptionsIDParams{

		Context: ctx,
	}
}

// NewPatchSubscriptionsIDParamsWithHTTPClient creates a new PatchSubscriptionsIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPatchSubscriptionsIDParamsWithHTTPClient(client *http.Client) *PatchSubscriptionsIDParams {
	var ()
	return &PatchSubscriptionsIDParams{
		HTTPClient: client,
	}
}

/*PatchSubscriptionsIDParams contains all the parameters to send to the API endpoint
for the patch subscriptions ID operation typically these are written to a http.Request
*/
type PatchSubscriptionsIDParams struct {

	/*SubscriptionUpdateRequest*/
	SubscriptionUpdateRequest *models.SubscriptionCreation
	/*ID
	  Subscription Id

	*/
	ID strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the patch subscriptions ID params
func (o *PatchSubscriptionsIDParams) WithTimeout(timeout time.Duration) *PatchSubscriptionsIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch subscriptions ID params
func (o *PatchSubscriptionsIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch subscriptions ID params
func (o *PatchSubscriptionsIDParams) WithContext(ctx context.Context) *PatchSubscriptionsIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch subscriptions ID params
func (o *PatchSubscriptionsIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch subscriptions ID params
func (o *PatchSubscriptionsIDParams) WithHTTPClient(client *http.Client) *PatchSubscriptionsIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch subscriptions ID params
func (o *PatchSubscriptionsIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSubscriptionUpdateRequest adds the subscriptionUpdateRequest to the patch subscriptions ID params
func (o *PatchSubscriptionsIDParams) WithSubscriptionUpdateRequest(subscriptionUpdateRequest *models.SubscriptionCreation) *PatchSubscriptionsIDParams {
	o.SetSubscriptionUpdateRequest(subscriptionUpdateRequest)
	return o
}

// SetSubscriptionUpdateRequest adds the subscriptionUpdateRequest to the patch subscriptions ID params
func (o *PatchSubscriptionsIDParams) SetSubscriptionUpdateRequest(subscriptionUpdateRequest *models.SubscriptionCreation) {
	o.SubscriptionUpdateRequest = subscriptionUpdateRequest
}

// WithID adds the id to the patch subscriptions ID params
func (o *PatchSubscriptionsIDParams) WithID(id strfmt.UUID) *PatchSubscriptionsIDParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the patch subscriptions ID params
func (o *PatchSubscriptionsIDParams) SetID(id strfmt.UUID) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *PatchSubscriptionsIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.SubscriptionUpdateRequest == nil {
		o.SubscriptionUpdateRequest = new(models.SubscriptionCreation)
	}

	if err := r.SetBodyParam(o.SubscriptionUpdateRequest); err != nil {
		return err
	}

	// path param id
	if err := r.SetPathParam("id", o.ID.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
