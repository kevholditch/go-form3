// Code generated by go-swagger; DO NOT EDIT.

package subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/ewilde/go-form3/models"
)

// NewPostSubscriptionsParams creates a new PostSubscriptionsParams object
// with the default values initialized.
func NewPostSubscriptionsParams() *PostSubscriptionsParams {
	var ()
	return &PostSubscriptionsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostSubscriptionsParamsWithTimeout creates a new PostSubscriptionsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostSubscriptionsParamsWithTimeout(timeout time.Duration) *PostSubscriptionsParams {
	var ()
	return &PostSubscriptionsParams{

		timeout: timeout,
	}
}

// NewPostSubscriptionsParamsWithContext creates a new PostSubscriptionsParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostSubscriptionsParamsWithContext(ctx context.Context) *PostSubscriptionsParams {
	var ()
	return &PostSubscriptionsParams{

		Context: ctx,
	}
}

// NewPostSubscriptionsParamsWithHTTPClient creates a new PostSubscriptionsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostSubscriptionsParamsWithHTTPClient(client *http.Client) *PostSubscriptionsParams {
	var ()
	return &PostSubscriptionsParams{
		HTTPClient: client,
	}
}

/*PostSubscriptionsParams contains all the parameters to send to the API endpoint
for the post subscriptions operation typically these are written to a http.Request
*/
type PostSubscriptionsParams struct {

	/*SubscriptionCreationRequest*/
	SubscriptionCreationRequest *models.SubscriptionCreation

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post subscriptions params
func (o *PostSubscriptionsParams) WithTimeout(timeout time.Duration) *PostSubscriptionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post subscriptions params
func (o *PostSubscriptionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post subscriptions params
func (o *PostSubscriptionsParams) WithContext(ctx context.Context) *PostSubscriptionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post subscriptions params
func (o *PostSubscriptionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post subscriptions params
func (o *PostSubscriptionsParams) WithHTTPClient(client *http.Client) *PostSubscriptionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post subscriptions params
func (o *PostSubscriptionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSubscriptionCreationRequest adds the subscriptionCreationRequest to the post subscriptions params
func (o *PostSubscriptionsParams) WithSubscriptionCreationRequest(subscriptionCreationRequest *models.SubscriptionCreation) *PostSubscriptionsParams {
	o.SetSubscriptionCreationRequest(subscriptionCreationRequest)
	return o
}

// SetSubscriptionCreationRequest adds the subscriptionCreationRequest to the post subscriptions params
func (o *PostSubscriptionsParams) SetSubscriptionCreationRequest(subscriptionCreationRequest *models.SubscriptionCreation) {
	o.SubscriptionCreationRequest = subscriptionCreationRequest
}

// WriteToRequest writes these params to a swagger request
func (o *PostSubscriptionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.SubscriptionCreationRequest == nil {
		o.SubscriptionCreationRequest = new(models.SubscriptionCreation)
	}

	if err := r.SetBodyParam(o.SubscriptionCreationRequest); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
