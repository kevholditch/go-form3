// Code generated by go-swagger; DO NOT EDIT.

package accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAccountsParams creates a new GetAccountsParams object
// with the default values initialized.
func NewGetAccountsParams() *GetAccountsParams {
	var ()
	return &GetAccountsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAccountsParamsWithTimeout creates a new GetAccountsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAccountsParamsWithTimeout(timeout time.Duration) *GetAccountsParams {
	var ()
	return &GetAccountsParams{

		timeout: timeout,
	}
}

// NewGetAccountsParamsWithContext creates a new GetAccountsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAccountsParamsWithContext(ctx context.Context) *GetAccountsParams {
	var ()
	return &GetAccountsParams{

		Context: ctx,
	}
}

// NewGetAccountsParamsWithHTTPClient creates a new GetAccountsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAccountsParamsWithHTTPClient(client *http.Client) *GetAccountsParams {
	var ()
	return &GetAccountsParams{
		HTTPClient: client,
	}
}

/*GetAccountsParams contains all the parameters to send to the API endpoint
for the get accounts operation typically these are written to a http.Request
*/
type GetAccountsParams struct {

	/*FilterAccountNumber
	  Filter by account number

	*/
	FilterAccountNumber []string
	/*FilterBankID
	  Filter by bank id e.g. sort code or bic

	*/
	FilterBankID []string
	/*FilterBankIDCode
	  Filter by type of bank id e.g. "GBDSC"

	*/
	FilterBankIDCode []string
	/*FilterCountry
	  Filter by country e.g. FR,GB

	*/
	FilterCountry []string
	/*FilterCustomerID
	  Filter by customer_id

	*/
	FilterCustomerID []string
	/*FilterIban
	  Filter by IBAN

	*/
	FilterIban []string
	/*FilterOrganisationID
	  Filter by organisation id

	*/
	FilterOrganisationID []strfmt.UUID
	/*PageNumber
	  Which page to select

	*/
	PageNumber *int64
	/*PageSize
	  Number of items to select

	*/
	PageSize *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get accounts params
func (o *GetAccountsParams) WithTimeout(timeout time.Duration) *GetAccountsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get accounts params
func (o *GetAccountsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get accounts params
func (o *GetAccountsParams) WithContext(ctx context.Context) *GetAccountsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get accounts params
func (o *GetAccountsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get accounts params
func (o *GetAccountsParams) WithHTTPClient(client *http.Client) *GetAccountsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get accounts params
func (o *GetAccountsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilterAccountNumber adds the filterAccountNumber to the get accounts params
func (o *GetAccountsParams) WithFilterAccountNumber(filterAccountNumber []string) *GetAccountsParams {
	o.SetFilterAccountNumber(filterAccountNumber)
	return o
}

// SetFilterAccountNumber adds the filterAccountNumber to the get accounts params
func (o *GetAccountsParams) SetFilterAccountNumber(filterAccountNumber []string) {
	o.FilterAccountNumber = filterAccountNumber
}

// WithFilterBankID adds the filterBankID to the get accounts params
func (o *GetAccountsParams) WithFilterBankID(filterBankID []string) *GetAccountsParams {
	o.SetFilterBankID(filterBankID)
	return o
}

// SetFilterBankID adds the filterBankId to the get accounts params
func (o *GetAccountsParams) SetFilterBankID(filterBankID []string) {
	o.FilterBankID = filterBankID
}

// WithFilterBankIDCode adds the filterBankIDCode to the get accounts params
func (o *GetAccountsParams) WithFilterBankIDCode(filterBankIDCode []string) *GetAccountsParams {
	o.SetFilterBankIDCode(filterBankIDCode)
	return o
}

// SetFilterBankIDCode adds the filterBankIdCode to the get accounts params
func (o *GetAccountsParams) SetFilterBankIDCode(filterBankIDCode []string) {
	o.FilterBankIDCode = filterBankIDCode
}

// WithFilterCountry adds the filterCountry to the get accounts params
func (o *GetAccountsParams) WithFilterCountry(filterCountry []string) *GetAccountsParams {
	o.SetFilterCountry(filterCountry)
	return o
}

// SetFilterCountry adds the filterCountry to the get accounts params
func (o *GetAccountsParams) SetFilterCountry(filterCountry []string) {
	o.FilterCountry = filterCountry
}

// WithFilterCustomerID adds the filterCustomerID to the get accounts params
func (o *GetAccountsParams) WithFilterCustomerID(filterCustomerID []string) *GetAccountsParams {
	o.SetFilterCustomerID(filterCustomerID)
	return o
}

// SetFilterCustomerID adds the filterCustomerId to the get accounts params
func (o *GetAccountsParams) SetFilterCustomerID(filterCustomerID []string) {
	o.FilterCustomerID = filterCustomerID
}

// WithFilterIban adds the filterIban to the get accounts params
func (o *GetAccountsParams) WithFilterIban(filterIban []string) *GetAccountsParams {
	o.SetFilterIban(filterIban)
	return o
}

// SetFilterIban adds the filterIban to the get accounts params
func (o *GetAccountsParams) SetFilterIban(filterIban []string) {
	o.FilterIban = filterIban
}

// WithFilterOrganisationID adds the filterOrganisationID to the get accounts params
func (o *GetAccountsParams) WithFilterOrganisationID(filterOrganisationID []strfmt.UUID) *GetAccountsParams {
	o.SetFilterOrganisationID(filterOrganisationID)
	return o
}

// SetFilterOrganisationID adds the filterOrganisationId to the get accounts params
func (o *GetAccountsParams) SetFilterOrganisationID(filterOrganisationID []strfmt.UUID) {
	o.FilterOrganisationID = filterOrganisationID
}

// WithPageNumber adds the pageNumber to the get accounts params
func (o *GetAccountsParams) WithPageNumber(pageNumber *int64) *GetAccountsParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the get accounts params
func (o *GetAccountsParams) SetPageNumber(pageNumber *int64) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the get accounts params
func (o *GetAccountsParams) WithPageSize(pageSize *int64) *GetAccountsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get accounts params
func (o *GetAccountsParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WriteToRequest writes these params to a swagger request
func (o *GetAccountsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesFilterAccountNumber := o.FilterAccountNumber

	joinedFilterAccountNumber := swag.JoinByFormat(valuesFilterAccountNumber, "csv")
	// query array param filter[account_number]
	if err := r.SetQueryParam("filter[account_number]", joinedFilterAccountNumber...); err != nil {
		return err
	}

	valuesFilterBankID := o.FilterBankID

	joinedFilterBankID := swag.JoinByFormat(valuesFilterBankID, "csv")
	// query array param filter[bank_id]
	if err := r.SetQueryParam("filter[bank_id]", joinedFilterBankID...); err != nil {
		return err
	}

	valuesFilterBankIDCode := o.FilterBankIDCode

	joinedFilterBankIDCode := swag.JoinByFormat(valuesFilterBankIDCode, "csv")
	// query array param filter[bank_id_code]
	if err := r.SetQueryParam("filter[bank_id_code]", joinedFilterBankIDCode...); err != nil {
		return err
	}

	valuesFilterCountry := o.FilterCountry

	joinedFilterCountry := swag.JoinByFormat(valuesFilterCountry, "csv")
	// query array param filter[country]
	if err := r.SetQueryParam("filter[country]", joinedFilterCountry...); err != nil {
		return err
	}

	valuesFilterCustomerID := o.FilterCustomerID

	joinedFilterCustomerID := swag.JoinByFormat(valuesFilterCustomerID, "csv")
	// query array param filter[customer_id]
	if err := r.SetQueryParam("filter[customer_id]", joinedFilterCustomerID...); err != nil {
		return err
	}

	valuesFilterIban := o.FilterIban

	joinedFilterIban := swag.JoinByFormat(valuesFilterIban, "csv")
	// query array param filter[iban]
	if err := r.SetQueryParam("filter[iban]", joinedFilterIban...); err != nil {
		return err
	}

	var valuesFilterOrganisationID []string
	for _, v := range o.FilterOrganisationID {
		valuesFilterOrganisationID = append(valuesFilterOrganisationID, v.String())
	}

	joinedFilterOrganisationID := swag.JoinByFormat(valuesFilterOrganisationID, "csv")
	// query array param filter[organisation_id]
	if err := r.SetQueryParam("filter[organisation_id]", joinedFilterOrganisationID...); err != nil {
		return err
	}

	if o.PageNumber != nil {

		// query param page[number]
		var qrPageNumber int64
		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := swag.FormatInt64(qrPageNumber)
		if qPageNumber != "" {
			if err := r.SetQueryParam("page[number]", qPageNumber); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param page[size]
		var qrPageSize int64
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("page[size]", qPageSize); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
