// Code generated by go-swagger; DO NOT EDIT.

package accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new accounts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for accounts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteAccountconfigurationsID deletes config
*/
func (a *Client) DeleteAccountconfigurationsID(params *DeleteAccountconfigurationsIDParams) (*DeleteAccountconfigurationsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAccountconfigurationsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAccountconfigurationsID",
		Method:             "DELETE",
		PathPattern:        "/accountconfigurations/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAccountconfigurationsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAccountconfigurationsIDNoContent), nil

}

/*
DeleteAccountsID deletes account
*/
func (a *Client) DeleteAccountsID(params *DeleteAccountsIDParams) (*DeleteAccountsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAccountsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAccountsID",
		Method:             "DELETE",
		PathPattern:        "/accounts/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAccountsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAccountsIDNoContent), nil

}

/*
DeleteBankidsID deletes bank Id
*/
func (a *Client) DeleteBankidsID(params *DeleteBankidsIDParams) (*DeleteBankidsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBankidsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteBankidsID",
		Method:             "DELETE",
		PathPattern:        "/bankids/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBankidsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteBankidsIDNoContent), nil

}

/*
DeleteBicsID deletes b i c
*/
func (a *Client) DeleteBicsID(params *DeleteBicsIDParams) (*DeleteBicsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBicsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteBicsID",
		Method:             "DELETE",
		PathPattern:        "/bics/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBicsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteBicsIDNoContent), nil

}

/*
GetAccountconfigurations lists configurations
*/
func (a *Client) GetAccountconfigurations(params *GetAccountconfigurationsParams) (*GetAccountconfigurationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountconfigurationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccountconfigurations",
		Method:             "GET",
		PathPattern:        "/accountconfigurations",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountconfigurationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAccountconfigurationsOK), nil

}

/*
GetAccountconfigurationsID fetches account configuration
*/
func (a *Client) GetAccountconfigurationsID(params *GetAccountconfigurationsIDParams) (*GetAccountconfigurationsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountconfigurationsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccountconfigurationsID",
		Method:             "GET",
		PathPattern:        "/accountconfigurations/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountconfigurationsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAccountconfigurationsIDOK), nil

}

/*
GetAccounts lists accounts
*/
func (a *Client) GetAccounts(params *GetAccountsParams) (*GetAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccounts",
		Method:             "GET",
		PathPattern:        "/accounts",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAccountsOK), nil

}

/*
GetAccountsID fetches account
*/
func (a *Client) GetAccountsID(params *GetAccountsIDParams) (*GetAccountsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccountsID",
		Method:             "GET",
		PathPattern:        "/accounts/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAccountsIDOK), nil

}

/*
GetBankids lists bank ids
*/
func (a *Client) GetBankids(params *GetBankidsParams) (*GetBankidsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBankidsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetBankids",
		Method:             "GET",
		PathPattern:        "/bankids",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBankidsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBankidsOK), nil

}

/*
GetBankidsID fetches bank Id
*/
func (a *Client) GetBankidsID(params *GetBankidsIDParams) (*GetBankidsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBankidsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetBankidsID",
		Method:             "GET",
		PathPattern:        "/bankids/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBankidsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBankidsIDOK), nil

}

/*
GetBics lists bics
*/
func (a *Client) GetBics(params *GetBicsParams) (*GetBicsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBicsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetBics",
		Method:             "GET",
		PathPattern:        "/bics",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBicsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBicsOK), nil

}

/*
GetBicsID fetches bic
*/
func (a *Client) GetBicsID(params *GetBicsIDParams) (*GetBicsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBicsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetBicsID",
		Method:             "GET",
		PathPattern:        "/bics/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBicsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBicsIDOK), nil

}

/*
PostAccountconfigurations creates configuration
*/
func (a *Client) PostAccountconfigurations(params *PostAccountconfigurationsParams) (*PostAccountconfigurationsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAccountconfigurationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAccountconfigurations",
		Method:             "POST",
		PathPattern:        "/accountconfigurations",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAccountconfigurationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAccountconfigurationsCreated), nil

}

/*
PostAccounts creates account
*/
func (a *Client) PostAccounts(params *PostAccountsParams) (*PostAccountsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAccounts",
		Method:             "POST",
		PathPattern:        "/accounts",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAccountsCreated), nil

}

/*
PostBankids creates bank id
*/
func (a *Client) PostBankids(params *PostBankidsParams) (*PostBankidsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostBankidsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostBankids",
		Method:             "POST",
		PathPattern:        "/bankids",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostBankidsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostBankidsCreated), nil

}

/*
PostBics creates b i c
*/
func (a *Client) PostBics(params *PostBicsParams) (*PostBicsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostBicsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostBics",
		Method:             "POST",
		PathPattern:        "/bics",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostBicsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostBicsCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
