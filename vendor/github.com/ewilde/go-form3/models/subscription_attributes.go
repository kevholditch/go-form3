// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SubscriptionAttributes subscription attributes
// swagger:model SubscriptionAttributes

type SubscriptionAttributes struct {

	// callback transport
	CallbackTransport string `json:"callback_transport,omitempty"`

	// callback uri
	// Pattern: ^[A-Za-z0-9 .,@:\/-_]*$
	CallbackURI string `json:"callback_uri,omitempty"`

	// event type
	// Pattern: ^[A-Za-z_-]*$
	EventType string `json:"event_type,omitempty"`

	// record type
	// Pattern: ^[A-Za-z_-]*$
	RecordType string `json:"record_type,omitempty"`

	// user id
	// Read Only: true
	UserID strfmt.UUID `json:"user_id,omitempty"`
}

/* polymorph SubscriptionAttributes callback_transport false */

/* polymorph SubscriptionAttributes callback_uri false */

/* polymorph SubscriptionAttributes event_type false */

/* polymorph SubscriptionAttributes record_type false */

/* polymorph SubscriptionAttributes user_id false */

// Validate validates this subscription attributes
func (m *SubscriptionAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCallbackTransport(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCallbackURI(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEventType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRecordType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var subscriptionAttributesTypeCallbackTransportPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["http","email","queue"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		subscriptionAttributesTypeCallbackTransportPropEnum = append(subscriptionAttributesTypeCallbackTransportPropEnum, v)
	}
}

const (
	// SubscriptionAttributesCallbackTransportHTTP captures enum value "http"
	SubscriptionAttributesCallbackTransportHTTP string = "http"
	// SubscriptionAttributesCallbackTransportEmail captures enum value "email"
	SubscriptionAttributesCallbackTransportEmail string = "email"
	// SubscriptionAttributesCallbackTransportQueue captures enum value "queue"
	SubscriptionAttributesCallbackTransportQueue string = "queue"
)

// prop value enum
func (m *SubscriptionAttributes) validateCallbackTransportEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, subscriptionAttributesTypeCallbackTransportPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SubscriptionAttributes) validateCallbackTransport(formats strfmt.Registry) error {

	if swag.IsZero(m.CallbackTransport) { // not required
		return nil
	}

	// value enum
	if err := m.validateCallbackTransportEnum("callback_transport", "body", m.CallbackTransport); err != nil {
		return err
	}

	return nil
}

func (m *SubscriptionAttributes) validateCallbackURI(formats strfmt.Registry) error {

	if swag.IsZero(m.CallbackURI) { // not required
		return nil
	}

	if err := validate.Pattern("callback_uri", "body", string(m.CallbackURI), `^[A-Za-z0-9 .,@:\/-_]*$`); err != nil {
		return err
	}

	return nil
}

func (m *SubscriptionAttributes) validateEventType(formats strfmt.Registry) error {

	if swag.IsZero(m.EventType) { // not required
		return nil
	}

	if err := validate.Pattern("event_type", "body", string(m.EventType), `^[A-Za-z_-]*$`); err != nil {
		return err
	}

	return nil
}

func (m *SubscriptionAttributes) validateRecordType(formats strfmt.Registry) error {

	if swag.IsZero(m.RecordType) { // not required
		return nil
	}

	if err := validate.Pattern("record_type", "body", string(m.RecordType), `^[A-Za-z_-]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SubscriptionAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubscriptionAttributes) UnmarshalBinary(b []byte) error {
	var res SubscriptionAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
